/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: STARDIST {
        ext.when  = { params.segmentation_method == 'stardist' && !params.skip_segmentation }
        ext.args  = [ "",
            params.stardist_model                                    ? "--model ${params.stardist_model}"                                    : "",
            (params.stardist_n_tiles_x && params.stardist_n_tiles_y) ? "--n_tiles ${params.stardist_n_tiles_x} ${params.stardist_n_tiles_y}" : "",
            ].join(" ").trim()
        ext.prefix = { "${meta.id}_stardist_mask" }
        publishDir = [
            path: "${params.outdir}/segmentation/stardist",
            pattern: "*.tif"
        ]
    }

    withName: "CELLPOSE" {
        ext.when  = { params.segmentation_method == 'cellpose' && !params.skip_segmentation }
        ext.args = [ "",
            "--channel_axis 0",
            "--no_npy",
            params.cellpose_diameter         ? "--diameter ${params.cellpose_diameter}"                 : "",
            params.cellpose_custom_model     ? ""                                                       : params.cellpose_pretrained_model ? "--pretrained_model ${params.cellpose_pretrained_model}" : "",
            params.cellpose_flow_threshold   ? "--flow_threshold ${params.cellpose_flow_threshold}"     : "",
            params.cellpose_edge_exclude     ? "--exclude_on_edges"                                     : ""
        ].join(" ").trim()
        publishDir = [
            path: "${params.outdir}/segmentation/cellpose",
            pattern: "*_cp_masks.tif",
            saveAs: { filename -> "${meta.id}_cellpose_mask.tif" }
        ]
    }

    withName: "DEEPCELL_MESMER" {
        ext.when  = { params.segmentation_method == 'mesmer' && !params.skip_segmentation }
        ext.args  = [ "",
            params.mesmer_compartment ? "--compartment ${params.mesmer_compartment}" : "",
            params.mesmer_image_mpp   ? "--image-mpp ${params.mesmer_image_mpp}"     : "",
            "--nuclear-channel 0"
        ].join(" ").trim()
        ext.prefix = { "${meta.id}_mesmer_mask" }
        publishDir = [
            path: "${params.outdir}/segmentation/mesmer",
            pattern: "*.tif"
        ]
    }

    withName: MICRONUCLAI_PREDICT{
        ext.args = ["",
            params.micronuclai_expansion       ? "--expansion ${params.micronuclai_expansion}"                  : "",
            params.micronuclai_resizing_factor ? "--resizing_factor ${params.micronuclai_resizing_factor}"      : "",
            params.micronuclai_size            ? "--size ${params.micronuclai_size} ${params.micronuclai_size}" : "",
        ].join(" ").trim()
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
